# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'json'
user_secrets_json = File.read(ENV['HOME']+'/.vagrant-rightscale.cfg')
user_secrets = JSON.parse(user_secrets_json)

Vagrant.require_plugin "vagrant-rightscale"

Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  config.vm.box = "RightImage_Ubuntu_12.04_x64_v13.5.0.1"
  config.vm.box_url = "https://rightscale-vagrant.s3.amazonaws.com/virtualbox/ubuntu/12.04/RightImage_Ubuntu_12.04_x64_v13.5.0.1.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:

  config.vm.provider :virtualbox do |vb|
    # Don't boot with headless mode
    # vb.gui = true

    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "1024"]
  end


  config.vm.provision :rightscale do |rightscale|

    rightscale.email = user_secrets['email']
    rightscale.password = user_secrets['password']
    rightscale.account_id = user_secrets['account_id']
    rightscale.api_url = user_secrets['api_url']

    # rightscale.cloud_name = "BlueSkies"
    rightscale.servertemplate = "TEST: Base ServerTemplate for Linux (v13.4) with BlueSkies"
    rightscale.deployment_name = "TEST: BlueSkies Flight Skool Demo"
    rightscale.server_name = "Test: BlueSkies Base"

    # rightscale.server_inputs = {
    #   # open up port 8000
    #   "sys_firewall/rule/enable" => "text:enable",
    #   "sys_firewall/rule/port" => "text:8000",
    #   "sys_firewall/rule/ip_address" => "text:any",
    #   "sys_firewall/rule/protocol" => "text:tcp"
    # }

    # scripts to run after boot list is completed
    # rightscale.operational_scripts = [
    #  "sys_firewall::setup_rule"
    # ]

  end
end